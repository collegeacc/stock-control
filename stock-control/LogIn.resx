<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AH//AAD//wAB//8QD///HH///wB///+A//8=
</value>
  </data>
</root>